// <autogenerated>
//   This file was generated from T4 template
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using TeamSystem.AlyCE.Common.Authentication;
using TeamSystem.AlyCE.Common.Session;
using TeamSystem.AlyCE.DomainModel;
using TeamSystem.AlyCE.Protocol;
using TeamSystem.AlyCE.Dal;
using TeamSystem.AlyCE.DomainModel.Validations;
using TeamSystem.AlyCE.MetaData.Descriptors;
using TeamSystem.AlyCE.FW_Extendibility;
using TeamSystem.AlyCE.Shared.Contracts.DomainModel;

namespace TeamSystem.Alyante.FI_GeneralData
{	
	[DataContract(IsReference = true)]
	public partial class RegioneFI : BaseEntity, IEntityWithTypedKey<RegioneFI.RegioneFIKey>
	{
		#region Constructor

		public RegioneFI()
		{ 
			PartialConstructor();
		}	
		
		partial void PartialConstructor();

		#endregion

		#region Properties

		private System.Nullable<System.Int32> _abintanti;
		partial void PreGet_Abintanti(ref System.Nullable<System.Int32> value);
		partial void PreSet_Abintanti(ref System.Nullable<System.Int32> value);
		partial void PostSet_Abintanti(System.Nullable<System.Int32> value);

		[DataMember]
		[WellFormedNumberAttribute(10,0)]
		public System.Nullable<System.Int32> Abintanti
		{
			get
			{ 
				PreGet_Abintanti(ref _abintanti); 
				return _abintanti; 
			}
			set
			{
				if (!Object.Equals(value, _abintanti))
				{
					OnPropertyChanging("Abintanti");
					PreSet_Abintanti(ref value);
					_abintanti = value;
					PostSet_Abintanti(value);
					OnPropertyChanged("Abintanti");
				}
			}
		}

		private System.String _citta;
		partial void PreGet_Citta(ref System.String value);
		partial void PreSet_Citta(ref System.String value);
		partial void PostSet_Citta(System.String value);

		[DataMember]
		[MaxTextLengthAttribute(22)]
		public System.String Citta
		{
			get
			{ 
				PreGet_Citta(ref _citta); 
				return _citta; 
			}
			set
			{
				if (!Object.Equals(value, _citta))
				{
					OnPropertyChanging("Citta");
					PreSet_Citta(ref value);
					_citta = value;
					PostSet_Citta(value);
					OnPropertyChanged("Citta");
				}
			}
		}

		private System.String _fiume;
		partial void PreGet_Fiume(ref System.String value);
		partial void PreSet_Fiume(ref System.String value);
		partial void PostSet_Fiume(System.String value);

		[DataMember]
		[MaxTextLengthAttribute(22)]
		public System.String Fiume
		{
			get
			{ 
				PreGet_Fiume(ref _fiume); 
				return _fiume; 
			}
			set
			{
				if (!Object.Equals(value, _fiume))
				{
					OnPropertyChanging("Fiume");
					PreSet_Fiume(ref value);
					_fiume = value;
					PostSet_Fiume(value);
					OnPropertyChanged("Fiume");
				}
			}
		}

		private System.String _provincia;
		partial void PreGet_Provincia(ref System.String value);
		partial void PreSet_Provincia(ref System.String value);
		partial void PostSet_Provincia(System.String value);

		[DataMember]
		[MaxTextLengthAttribute(22)]
		public System.String Provincia
		{
			get
			{ 
				PreGet_Provincia(ref _provincia); 
				return _provincia; 
			}
			set
			{
				if (!Object.Equals(value, _provincia))
				{
					OnPropertyChanging("Provincia");
					PreSet_Provincia(ref value);
					_provincia = value;
					PostSet_Provincia(value);
					OnPropertyChanged("Provincia");
				}
			}
		}

		private System.String _ragsoc;
		partial void PreGet_Ragsoc(ref System.String value);
		partial void PreSet_Ragsoc(ref System.String value);
		partial void PostSet_Ragsoc(System.String value);

		[DataMember]
		[MaxTextLengthAttribute(22)]
		public System.String Ragsoc
		{
			get
			{ 
				PreGet_Ragsoc(ref _ragsoc); 
				return _ragsoc; 
			}
			set
			{
				if (!Object.Equals(value, _ragsoc))
				{
					OnPropertyChanging("Ragsoc");
					PreSet_Ragsoc(ref value);
					_ragsoc = value;
					PostSet_Ragsoc(value);
					OnPropertyChanged("Ragsoc");
				}
			}
		}

		private System.Int32 _regione;
		partial void PreGet_Regione(ref System.Int32 value);
		partial void PreSet_Regione(ref System.Int32 value);
		partial void PostSet_Regione(System.Int32 value);

		[DataMember]
		[MandatoryAttribute]
		[WellFormedNumberAttribute(10,0)]
		public System.Int32 Regione
		{
			get
			{ 
				PreGet_Regione(ref _regione); 
				return _regione; 
			}
			set
			{
				if (!Object.Equals(value, _regione))
				{
					OnPropertyChanging("Regione");
					PreSet_Regione(ref value);
					_regione = value;
					PostSet_Regione(value);
					OnPropertyChanged("Regione");
				}
			}
		}

		public RegioneFIKey CurrentKey
		{
			get
			{ 
				return (RegioneFIKey)((IEntityWithKey)this).CurrentKey;
			}
		}

		#endregion

		#region Methods

		public override Boolean Equals(Object obj)
		{
			if (!base.Equals(obj))
				return false;
			RegioneFI other = (RegioneFI)obj;
			if (!object.Equals(Regione, other.Regione))	
				return false;
		
			if (!CustomEqualityEvaluationForAddedItems(other))
				return false;
		
			ICanExtendEntityEquals<RegioneFI> exp = this as ICanExtendEntityEquals<RegioneFI>;
			if (exp == null)
				return true;
			return exp.ExtendEquals(other);
		}

		public override Int32 GetHashCode()
		{
			if (((IEntityWithMappingCapabilities)this).IsInMapping)
				return base.GetHashCode();
			int hashCode = Regione.GetHashCode();
			ICanExtendEntityEquals<RegioneFI> exp = this as ICanExtendEntityEquals<RegioneFI>;
					if (exp == null)
						return hashCode;
					return hashCode ^ exp.ExtendGetHashCode();
		}

		public static Boolean operator ==(RegioneFI obj, RegioneFI other)
		{
			return (object)obj == null ? (object)other == null : obj.Equals(other);
		}

		public static Boolean operator !=(RegioneFI obj, RegioneFI other)
		{
			return !(obj == other);
		}

		public override IEntityKey CreateKey()
		{
			return new RegioneFIKey();
		}

		public override IEntityKey CreateKey(IEntity currentEntity)
		{
			return new RegioneFIKey((RegioneFI)currentEntity);
		}

		#endregion

		#region Nested classes

		[DataContract(IsReference = true)]
		public partial class RegioneFIKey : BaseKey
		{
			#region Constructor

			public RegioneFIKey()
			{ }

			public RegioneFIKey(RegioneFI currentEntity)
				 : base(currentEntity)
			{ }

			#endregion

			#region Properties

			private System.Int32 _regione;

			[DataMember]
			public System.Int32 Regione
			{
				get
				{
					if(EntityOwner != null)
					{
						return ((RegioneFI)EntityOwner).Regione;
					}
					return _regione;
				} 
				set
				{
					_regione = value;
					if(EntityOwner != null)
					{
						((RegioneFI)EntityOwner).Regione = value;
					}
				}
			}

			#endregion
		}

		public static partial class Informations
		{
			#region Fields

			public const String EntityName = "RegioneFI";
			public const String EntitySetName = "RegioneFISet";
			public const String Abintanti = "Abintanti";
			public const String Citta = "Citta";
			public const String Fiume = "Fiume";
			public const String Provincia = "Provincia";
			public const String Ragsoc = "Ragsoc";
			public const String Regione = "Regione";

			#endregion
		}

		public static partial class DatabaseInformations
		{
			#region Fields

			public const String TableName = "Regione";
			public const String Abintanti = "abintanti";
			public const String Citta = "citta";
			public const String Fiume = "fiume";
			public const String Provincia = "provincia";
			public const String Ragsoc = "ragsoc";
			public const String Regione = "id_regione";

			#endregion
		}

		#endregion
	}

	[DataContract]
	public partial class RegioneFISet : EntityCollection<RegioneFI>
	{
		#region Constructor

		public RegioneFISet()
		{ }

		public RegioneFISet(List<RegioneFI> list)
			 : base(list)
		{ }

		public RegioneFISet(BaseEntity entity)
			 : base(entity)
		{ }

		#endregion

		#region Methods


		#endregion
	}
}

